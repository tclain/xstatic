{"version":3,"file":"index.js","sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["import {\n  MachineSpec,\n  MachineEvent,\n  Interpreter,\n  Machine,\n  MachineEventHandler,\n  MachineState,\n  MachineTransitionHandler,\n  Action,\n  TransitionsOf,\n  SideEffect,\n} from \"./types\";\nimport { mapValues, buildAssignAction, buildSendAction } from \"./utils\";\n\n// @xstate-diff: createMachine returns a service\nexport class DefaultInterpreter<Spec extends MachineSpec>\n  implements Interpreter<Spec> {\n  /** the current state of all the states of the machine */\n  public state: MachineState<Spec> = {};\n\n  /**\n   * the list of handlers to execute when a new event hits the machine\n   */\n  private onEventHandlers: MachineEventHandler<Spec>[] = [];\n\n  /**\n   * the list of handlers to execute when a new transition is the performed in the machine\n   */\n  private onTransitionHandlers: MachineTransitionHandler<Spec>[] = [];\n\n  private started: boolean = false;\n\n  constructor(public config: Machine<Spec>) {}\n\n  /** the machine listen to events */\n  start() {\n    this.started = true;\n    return this;\n  }\n\n  /** the machine stops listening to events */\n  stop() {\n    return this;\n  }\n\n  /** register a middleware to produce side effects on event */\n  onEvent(handler: MachineEventHandler<Spec>) {\n    this.onEventHandlers.push(handler);\n    return this;\n  }\n\n  /** register a middleware to produce side effects on a successful transition */\n  onTransition(handler: MachineTransitionHandler<Spec>) {\n    this.onTransitionHandlers.push(handler);\n    return this;\n  }\n\n  /** send a new event in the system */\n  send(event: MachineEvent<Spec>) {\n    if (!this.started) return;\n    return this.state;\n  }\n}\n\nexport const createMachine = <Spec extends MachineSpec>(\n  config: Machine<Spec>\n): Interpreter<Spec> => {\n  return new DefaultInterpreter(config);\n};\n\nexport type NewContext<Spec extends MachineSpec> = {\n  [Key in keyof Spec[\"context\"]]?: (\n    context: MachineSpec,\n    event: MachineEvent<Spec>\n  ) => Spec[\"context\"][Key];\n};\nexport const assign = <Spec extends MachineSpec>(\n  assigners: NewContext<Spec>\n): Action<Spec> => (ctx, event) => {\n  return {\n    ...ctx,\n    ...mapValues(assigners, (assigner, key) => {\n      const newContext = assigner(ctx, event);\n      return buildAssignAction(newContext);\n    }),\n  };\n};\n\n// TODO: implement timing\nexport const send = <Spec extends MachineSpec>(\n  event: TransitionsOf<MachineSpec>,\n  { delay = 0, to = \"self\" }: { delay?: number; to?: string } = {}\n): Action<Spec> => (ctx, event) => {\n  return buildSendAction(event.type, { delay, to });\n};\n","import { MachineSpec, TransitionsOf, AssignEffect, SendEffect } from \"./types\";\n\nexport const mapValues = <Obj extends {}>(\n  object: Obj,\n  fn: <Key extends keyof Obj>(value: Obj[Key], key: Key) => any\n): Obj => {\n  return Object.keys(object).reduce((newObject, key) => {\n    return { ...newObject, [key]: fn(object[key], key as keyof Obj) };\n  }, {} as Obj);\n};\n\nexport const buildAssignAction = <Spec extends MachineSpec>(\n  context: Spec[\"context\"]\n): AssignEffect<Spec> => {\n  return {\n    newContext: context,\n    type: \"assign\",\n  };\n};\n\nexport const buildSendAction = <Spec extends MachineSpec>(\n  transition: TransitionsOf<Spec>,\n  // TODO: extract type\n  opts: { to: string; delay: number }\n): SendEffect<Spec> => {\n  return {\n    type: \"send\",\n    transition,\n    to: opts.to,\n    delay: opts.delay,\n  };\n};\n"],"names":["DefaultInterpreter","config","this","start","started","stop","onEvent","handler","onEventHandlers","push","onTransition","onTransitionHandlers","send","event","state","assigners","ctx","object","fn","assigner","key","newContext","type","Object","keys","reduce","newObject","delay","to","transition","opts"],"mappings":"mNAeaA,aAiBX,WAAmBC,GAAAC,YAAAD,EAdZC,WAA4B,GAK3BA,qBAA+C,GAK/CA,0BAAyD,GAEzDA,cAAmB,EAf7B,2BAoBEC,MAAA,WAEE,OADAD,KAAKE,SAAU,UAKjBC,KAAA,WACE,eAIFC,QAAA,SAAQC,GAEN,OADAL,KAAKM,gBAAgBC,KAAKF,WAK5BG,aAAA,SAAaH,GAEX,OADAL,KAAKS,qBAAqBF,KAAKF,WAKjCK,KAAA,SAAKC,GACH,GAAKX,KAAKE,QACV,YAAYU,wDAgBM,SACpBC,mBACkBC,EAAKH,GACvB,YACKG,GC7ELC,ED8EeF,EC7EfG,ED6E0B,SAACC,EAAUC,GAEjC,MCrEG,CACLC,WDmEqBF,EAASH,EAAKH,GClEnCS,KAAM,WAVDC,OAAOC,KAAKP,GAAQQ,OAAO,SAACC,EAAWN,SAC5C,YAAYM,UAAYN,GAAMF,EAAGD,EAAOG,SACvC,MANoB,IACvBH,EACAC,0BD4D2B,SAC3BjB,GAEA,WAAWD,EAAmBC,iBAsBZ,SAClBY,sBAC8D,SAA5Dc,MAAAA,aAAQ,QAAGC,GAAAA,aAAK,yBACAZ,EAAKH,GACvB,MCpEO,CACLS,KAAM,OACNO,WDkEqBhB,EAAMS,KCjE3BM,IALFE,EDsEmC,CAAEH,MAAAA,EAAOC,GAAAA,ICjEjCA,GACTD,MAAOG,EAAKH,OATe,IAG7BG"}